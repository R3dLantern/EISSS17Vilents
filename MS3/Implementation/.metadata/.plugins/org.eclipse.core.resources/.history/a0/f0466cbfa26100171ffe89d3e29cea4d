package application.controller.casemodder;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import application.Main;
import application.controller.ILayoutController;
import application.util.EBoolean;
import application.util.EFXML;
import application.util.EURI;
import application.util.ServerRequest;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import model.HttpResponse;

/**
 * Controller-Klasse für das Casemodder-Layout
 * @author Leonid Vilents
 */
public class LayoutController implements ILayoutController {
	
	@FXML
	private TabPane tabs;
	
	@FXML
	private Tab tabDashboard;
	
	@FXML
	private Tab tabProfile;
	
	@FXML
	private Tab tabMessages;
	
	@FXML
	private Tab tabProjects;
	
	@FXML
	private Label usernameLabel;
	
	@FXML
	private Button logoutButton;
	
	private int userId;
	
	/*
	 * (non-Javadoc)
	 * @see application.controller.ILayoutController#initializeWithLayoutManager()
	 */
	@Override
	public void initializeWithLayoutManager()
	{
		Main.initializeLayoutManager(this.userId, EBoolean.CASEMODDER.value(), tabs);
		tabDashboard.setContent(Main.layoutManager.getDashboardTabContent());
		int that_UserId = this.userId;
		tabs.getSelectionModel().selectedItemProperty().addListener(
			new ChangeListener<Tab>() {
				@Override
				public void changed(ObservableValue<? extends Tab> ov, Tab deselected, Tab selected) {
					Set<String> ids = new HashSet<String>(
						Arrays.asList(
							new String[] {
									"tabDashboard",
									"tabProfile",
									"tabMessages",
									"tabProjects"
							}
						)
					);
					if(ids.contains(deselected.getId())) {
						deselected.setContent(null);
					}
					switch(selected.getId()) {
					default:
					case "tabDashboard":
						selected.setContent(Main.layoutManager.getDashboardTabContent());
						break;
					case "tabProfile":
						selected.setContent(Main.layoutManager.getProfileTabContent(that_UserId, EBoolean.CASEMODDER.value()));
						break;
					case "tabMessages":
						selected.setContent(Main.layoutManager.getMessagesTabContent());
						break;
					case "tabProjects":
						selected.setContent(Main.layoutManager.getProjectsTabContent());
						break;
					}
				}
			}
		);
	}
		
	
	/**
	 * Loggt den Benutzer aus und leitet zurück auf die Login-Maske.
	 */
	@FXML
	protected void handleLogoutButton()
	{
		ServerRequest req = new ServerRequest(EURI.LOGOUT.uri());
		
		HttpResponse res = req.get();
		
		switch (res.getStatusCode()) {
		case 204:
			Main.sceneLoader.loadScene(EFXML.LOGIN.fxml());
			return;
		default:
			return;
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see application.controller.ILayoutController#setUsername(java.lang.String)
	 */
	@Override
	public void setUsername(String email)
	{
		usernameLabel.setText(email);
	}
	
	/*
	 * (non-Javadoc)
	 * @see application.controller.ILayoutController#setUserId(int)
	 */
	@Override
	public void setUserId(int id) {
		this.userId = id;
	}
	
	/**
	 * Getter für userId
	 * @return gesetzte userId
	 */
	public int getUserId() {
		return this.userId;
	}
}
