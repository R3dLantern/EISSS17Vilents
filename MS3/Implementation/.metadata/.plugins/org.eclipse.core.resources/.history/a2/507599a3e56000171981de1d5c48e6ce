package application.controller.sponsor;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

import javax.xml.bind.DatatypeConverter;

import org.json.JSONException;
import org.json.JSONObject;

import application.Main;
import application.controller.ISignInUpHandling;
import application.util.FormValidator;
import application.util.PasswordUtil;
import application.util.ServerRequest;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.FileChooser;
import model.HttpResponse;

/**
 * Controller für die Sponsoren-Registrierungsmaske.
 * @author Leonid Vilents
 *
 */
public class SignupController implements ISignInUpHandling {
	
	private File file;
	
	@FXML
	private Hyperlink signupAsCasemodderLink;
	
	@FXML
	private TextField email;
	
	@FXML
	private PasswordField password;
	
	@FXML
	private DatePicker dateOfBirth;
	
	@FXML
	private Label errorLabel;
	
	@FXML
	private Button fileUploadButton;
	
	@FXML
	private TextField filePath;
	
	@FXML
	private Button signupButton;
	
	@FXML
	private Hyperlink backToLoginLink;
	
	/**
	 * Zur Login-Maske wechseln
	 */
	@FXML
	protected void handleBackToLoginLink()
	{
		Main.sceneLoader.loadScene(FILENAME_LOGIN);
	}
	
	/**
	 * Zur Casemodder-Registrierungsmaske wechseln
	 */
	@FXML
	protected void handleSignupCasemodderLink()
	{
		Main.sceneLoader.loadScene(FILENAME_SIGNUP_CASEMODDER);
	}
	
	/**
	 * Auswahlbildschirm für Datei-Upload zeigen, nach erfolgreicher Auswahl den absoluten Dateipfad anzeigen
	 */
	@FXML
	protected void handleFileChoice()
	{
		final FileChooser fileChooser = getFileChooser();
		File file = fileChooser.showOpenDialog(Main.sceneLoader.getPrimaryStage());
        if (file != null) {
        	this.file = file;
            filePath.setText(file.getAbsolutePath());
        }
	}
	
	/**
	 * Registrierungvorgang
	 */
	@FXML
	protected void handleSignupButton()
	{
		FormValidator validator = new FormValidator();
		
		errorLabel.setText(validator.validateEmail(email.getText(), IS_NOT_LOGIN));
		if (!errorLabel.getText().isEmpty()) {
			return;
		}
		
		errorLabel.setText(validator.validatePassword(password.getText(), IS_NOT_LOGIN));
		if (!errorLabel.getText().isEmpty()) {
			return;
		}
		
		errorLabel.setText(validator.valiateDateOfBirth(dateOfBirth.getValue(), IS_SPONSOR));
		if (!errorLabel.getText().isEmpty()) {
			return;
		}
		
		errorLabel.setText(validator.validateFile(filePath.getText()));
		if (!errorLabel.getText().isEmpty()) {
			return;
		}
		
		
		ServerRequest req = new ServerRequest(SIGNUP_URI);
		
		try {
			HttpResponse res = req.post(getSignupData());
			switch (res.getStatusCode()) {
			case 201:
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Registrierung");
				alert.setHeaderText("Registrierung erfolgreich!");
				alert.setContentText("Sie können Sich jetzt mit ihren Benutzerdaten einloggen.");
				alert.showAndWait();
				Main.sceneLoader.loadScene(FILENAME_LOGIN);
			default:
				break;
			}
			return;
		} catch (IOException e) {
			e.printStackTrace();
			errorLabel.setText("IOException");
		} catch (NullPointerException n) {
			n.printStackTrace();
			errorLabel.setText("NullPointerException");
			return;
		}
	}
	
	/**
	 * Verpackt die angegebenen Daten aus der Maske in einen JSON-String.
	 * @return JSONObject als String, oder null, falls ein Fehler aufgetreten ist.
	 */
	private JSONObject getSignupData()
	{
		JSONObject obj = new JSONObject();
		try{
			obj.put("email", email.getText());
			obj.put("password", PasswordUtil.getHash(PasswordUtil.ALGORITHM_SHA256, password.getText()));
			obj.put("type", "sponsor");
			obj.put("dateOfBirth", dateOfBirth.getValue().toString());
			obj.put("accreditFile", convertFileToString());
			return obj;
		} catch (JSONException e){
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * Gibt ein vorkonfiguriertes FileChooser-Objekt zurück.
	 * @return das vorkonfigurierte FileChooser-Objekt
	 */
	private FileChooser getFileChooser()
	{
		FileChooser fc = new FileChooser();
		fc.setTitle("Akkreditierungsdatei auswählen");
		fc.setInitialDirectory(new File(System.getProperty("user.home")));
		fc.getExtensionFilters().addAll(
			new FileChooser.ExtensionFilter("Alle Dateien (*.*)", "*.*"),
			new FileChooser.ExtensionFilter("PDF (*.pdf)", "*.pdf")
		);
		return fc;
	}
	
	/**
	 * Konvertiert eine Datei in einen Base64-String.
	 * @param filePath der absolute Dateipfad
	 * @return
	 */
	private String convertFileToString() throws IOException{
		
		byte[] bytes = Files.readAllBytes(this.file.toPath());
		return new String(DatatypeConverter.printBase64Binary(bytes));
	}
}
