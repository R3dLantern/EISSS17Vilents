package application.util.ui;

import java.io.IOException;
import java.util.Date;

import application.controller.snippet.MessageOverviewController;
import application.controller.snippet.ProfileProjectController;
import application.controller.snippet.ProjectOverviewController;
import application.controller.snippet.SponsoringApplicantController;
import javafx.fxml.FXMLLoader;
import javafx.fxml.LoadException;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;

/**
 * Hilfsklasse für das Laden von FXML-Snippets
 * @author Leonid Vilents
 */
public class SnippetLoader{
	
	/**
	 * Initialisiert ein Projekt-Snippet für die Projektwelt und gibt es zurück.
	 * @param pId	Projekt-ID
	 * @param title	Projekttitel
	 * @return initialisiertes AnchorPane-Objekt.
	 */
	public Pane getProjectOverviewSnippet(int pId, String title)
	{
		FXMLLoader loader = new FXMLLoader(
			getClass()
			.getResource(EFXML.O_PROJECT.fxml())
		);
		try {
			Pane content = loader.load();
			ProjectOverviewController controller = loader.<ProjectOverviewController>getController();
			controller.initWithData(pId, title);
			return content;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}	
	}
	
	/**
	 * Initialisiert dynamisch ein Nachrichten-Snippet für die Nachrichtenübersicht und gibt es zurück.
	 * @param isUnread	Flag für Ungelesen-Status
	 * @param mId		Nachricht-ID
	 * @param sId		Absender-ID
	 * @param date		Zeitstempel der Nachricht
	 * @param firstName	Vorname des Absenders
	 * @param lastName	Nachname des Absenders
	 * @return initialisiertes AnchorPane-Objekt.
	 */
	public AnchorPane getMessageOverviewSnippet(boolean isUnread, int mId, int sId, Date date, String firstName, String lastName) {
		FXMLLoader loader = new FXMLLoader(
			getClass()
			.getResource(EFXML.O_MESSAGE.fxml()) 
		);
		try {
			AnchorPane content = loader.load();
			MessageOverviewController controller = loader.<MessageOverviewController>getController();
			controller.initWithData(isUnread, mId, sId, date, firstName, lastName);
			return content;
		} catch (LoadException l) {
			l.printStackTrace();
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * Initialisiert dynamisch ein Projekt-Snippet für das Benutzerprofil und gibt dieses zurück.
	 * @param pId	Projekt-ID
	 * @param title	Projekttitel
	 * @return	Initialisiertes AnchorPane-Objekt
	 */
	public AnchorPane getProfileProjectSnippet(int pId, String title)
	{
		FXMLLoader loader = new FXMLLoader(
			getClass()
			.getResource(EFXML.P_PROFILE.fxml())
		);
		try {
			AnchorPane content = loader.load();
			ProfileProjectController controller = loader.<ProfileProjectController>getController();
			controller.initializeWithData(pId, title);
			return content;
		} catch (LoadException le) {
			le.printStackTrace();
			return null;
		} catch (IOException ie) {
			ie.printStackTrace();
			return null;
		}
	}
	
	
	/**
	 * Gibt ein initialisiertes Anwärter-Snippet zurück.
	 * @param applicantId	Benutzer-ID des Anwärters
	 * @param vorname		Vorname
	 * @param nachname		Nachname
	 * @return
	 */
	public AnchorPane getSponsoringApplicantSnippet(int applicantId, String vorname, String nachname)
	{
		FXMLLoader loader = new FXMLLoader(
			getClass()
			.getResource(EFXML.A_SPONSORING.fxml())
		);
		try {
			AnchorPane content = loader.load();
			SponsoringApplicantController controller = loader.<SponsoringApplicantController>getController();
			controller.initWithData(applicantId, vorname, nachname);
			return content;
		} catch (LoadException le) {
			le.printStackTrace();
			return null;
		} catch (IOException ie) {
			ie.printStackTrace();
			return null;
		}
	}
}
