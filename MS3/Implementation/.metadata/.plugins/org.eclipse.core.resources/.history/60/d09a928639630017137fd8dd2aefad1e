package application.controller.casemodder;

import java.io.IOException;

import org.json.JSONException;
import org.json.JSONObject;

import application.Main;
import application.util.EBoolean;
import application.util.EURI;
import application.util.FormValidator;
import application.util.PasswordUtil;
import application.util.conn.ServerRequest;
import application.util.ui.EFXML;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import model.HttpResponse;

/**
 * Controller-Klasse für die Casemodder-Registrierungsmaske
 * @author Leonid Vilents
 */
public class SignupController {
	
	@FXML
	private Hyperlink signUpAsSponsorLink;
	
	@FXML
	private TextField email;
	
	@FXML
	private PasswordField password;
	
	@FXML
	private DatePicker dateOfBirth;
	
	@FXML
	private Label errorLabel;
	
	@FXML
	private Button signupButton;
	
	@FXML
	private Hyperlink backToLoginLink;
	
	/**
	 * Zur Loginmaske wechseln
	 */
	@FXML
	protected void handleBackToLoginLink()
	{
		Main.sceneLoader.loadScene(EFXML.LOGIN.fxml());
	}
	
	/**
	 * Zur Registrierungsmaske für Sponsoren wechseln
	 */
	@FXML
	protected void handleSignupSponsorLink()
	{
		Main.sceneLoader.loadScene(EFXML.SP_SIGNUP.fxml());
	}
	
	/**
	 * Registrierungsvorgang
	 */
	@FXML
	protected void handleSignupButton()
	{
		FormValidator validator = new FormValidator();
		
		errorLabel.setText(validator.validateEmail(email.getText(), EBoolean.NOT_LOGIN.value()));
		if(!errorLabel.getText().isEmpty()){
			return;
		}
		
		errorLabel.setText(validator.validatePassword(password.getText(), EBoolean.NOT_LOGIN.value()));
		if(!errorLabel.getText().isEmpty()){
			return;
		}
		
		errorLabel.setText(validator.valiateDateOfBirth(dateOfBirth.getValue(), EBoolean.NOT_CASEMODDER.value()));
		if(!errorLabel.getText().isEmpty()){
			return;
		}
		
		ServerRequest req = new ServerRequest(EURI.SIGNUP.uri());
		
		try {
			HttpResponse res = req.post(getSignupData());
			switch (res.getStatusCode()) {
			case 201:
			default:
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Registrierung");
				alert.setHeaderText("Registrierung erfolgreich!");
				alert.setContentText("Sie können Sich jetzt mit ihren Benutzerdaten einloggen.");
				alert.showAndWait();
				Main.sceneLoader.loadScene(EFXML.LOGIN.fxml());
			}
			return;
		} catch (IOException e) {
			e.printStackTrace();
			errorLabel.setText("IOException");
		}
	}
	
	/**
	 * Verpackt die Maskendaten in ein JSONObject.
	 * @return das erzeugte JSONObject, oder null
	 */
	private JSONObject getSignupData()
	{
		JSONObject obj = new JSONObject();
		try{
			obj.put("email", email.getText());
			obj.put("password", PasswordUtil.getHash(PasswordUtil.ALGORITHM_SHA256, password.getText()));
			obj.put("type", "casemodder");
			obj.put("dateOfBirth", dateOfBirth.getValue().toString());
			return obj;
		} catch (JSONException e){
			e.printStackTrace();
			return null;
		}
	}
}
